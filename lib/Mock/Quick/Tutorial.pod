=pod

=head1 NAME

Mock::Quick::Tutorial - Tutorial/Presentation for Mock::Quick

=head1 DESCRIPTION

This is a tutorial that doubles as a presentation for Mock::Quick.

=head1 SHOVE IT IN - MOCKING QUICKLY

I<I don't know what it needs, but I know what it looks like, and where to put it.>

=head2 qobj()

=head2 If any object will do

=head2 Minimal API specification

=head2 Adding methods on the fly

=head2 Control object

=head1 ENLIGHTENMENT - MOCKING STRICTLY

I<I have reached a higher understanding, I will grasp control.>

=head2 Becoming strict

=head2 qstrict()

=head1 DOPPELGÄNGER - REPLACING A CLASS

I<Looks like our duck, quacks like our duck... but it has a goatee...>

=head2 qimplement() and qclass()

=head2 use cases

=head2 Attributes

=head2 Shortcuts

=head2 Inheritance

=head2 Control object

=head2 Scope warning, and cleaning up

=head1 COUP D'ÉTAT - TAKING OVER A LOADED CLASS

I<No really, you maintain control!... so long as we can tell you what to do.>

=head2 qtakeover() and qclass() revisited

=head2 Use cases

=head2 Scope, and cleaning up

=head1 TREE? BAM! - ANONYMOUS CLASS

I<I swear! The tree jumped out, hit my car, and ran away!>

=head2 qclass()

=head2 How it is useful

=head2 Scope, and cleaning up

=head1 EXTERMINATE! - USAGE METRICS

I<Yes I deleted it, but it's ok, it wasn't used anywhere. oh...>

...

=head1 ITS FULL OF STARS - INTERNALS

I<I'm afraid I can't do that dave, oh wait.. yes I can.>

=head2 Mock::Quick - Interface Layer

=head2 Mock::Quick::Util - Make hard things possible

=head2 Mock::Quick::Object - Dynamic Object

=head2 Mock::Quick::Object::Control - Object Remote Control

=head2 Mock::Quick::Method - Bless a method to make it distinct

=head2 Mock::Quick::Class - Bend a class to your will

=cut
